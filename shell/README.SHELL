SerialICE README

ABOUT
-----

This is the SerialICE mini shell. It is a minimal shell running from a
mainboard flash instead of the BIOS and it allows querying and poking hardware
with minimal setup. No RAM is required to be initialized for this.

The shell commands have a very compact syntax, because the shell is mostly
meant to be used together with a SerialICE capable Qemu (See README.QEMU)

GETTING STARTED
---------------

First, you have to compile the SerialICE shell for your mainboard.

Configure the SerialICE shell for your mainboard:
 $ make menuconfig

Compile the SerialICE shell:
 $ make

Please submit an init file for your mainboard if it's not there yet. (See
"PORTING THE SHELL TO NEW MAINBOARDS")

Next, you need to compile Qemu with SerialICE support.

LICENSE AND COPYRIGHT
---------------------

SerialICE mini shell is copyright (C) 2009 coresystems GmbH.
It is released under the GNU General Public License version 2.
For questions contact <info@coresystems.de>

PORTING THE SHELL TO NEW MAINBOARDS
-----------------------------------

Though it is designed to be as generic as possible the SerialICE shell needs a
little bit of hardware specific initialization code for each supported
mainboard. There is one file per mainboard with this initialization code in the
mainboard/ directory.

The purpose of the initialization code is to get the machine far enough to be
able to talk via serial console. This usually requires setup of the Super I/O
chip and some southbridge registers. In some cases extra work may have to be
done, like disabling a power-on watchdog timer, enabling a fan(!), or enabling
some devices "on the path to the Super I/O".

COMMANDS OF THE SERIALICE SHELL
-------------------------------

All SerialICE commands start with an asterisk (*) followed by a two
character command code.

<addr>	32bit memory address in hex format (without leading 0x)
<port>	16bit I/O address in hex format (without leading 0x)
<len>	b, w, l size of access (1, 2, 4 bytes)
<value>	1, 2, 4 byte data in hex format (without leading 0x)

1. Memory Reads

   Syntax:
   *rm<addr>.<len>

   Example:
   > *rm00000000.w
   0000
   >

2. Memory Writes

  Syntax:
  *wm<addr>.<len>=<value>

  Example:
  > *wm00000000.w=0000
  >

3. I/O Reads

  Syntax:
  *ri<port>.<len>

  Example:
  > *ri0080.b
  23
  >

4. I/O Writes

  Syntax:
  *wi<port>.<len>=<value>

  Example:
  > *wi0080.b=23
  >

5. MSR reads

  Syntax:
  *rc<addr>.<key>

  Example:
  > *rc000000cd.9c5a203a
  00000000.00000933
  >

6. MSR Writes

  Syntax:
  *wc<addr>.<key>=<high>.<low>

  Example:
  > *wc00000000.9c5a203a=00000000.00000000
  >

7. CPUID

  Syntax:
  *ci<eax>.<ecx>

  Example:
  > *ci00000001.00000000
  000006f2.00020800.0000e3bd.bfebfbff
  >

8. Mainboard Name

  Syntax:
  *mb

  Example:
  > *mb
  Kontron 986LCD-M
  >

9. Version Information

  Syntax:
  *vi

  Example:
  > *vi
  SerialICE v1.5 (Nov 26 2009)

  >
